<?php

/**
 * InputfieldURLChecker module for ProcessWire
 * https://goo.gl/F8CAK8
 */

/**
 * Class InputfieldURLChecker
 */
class InputfieldURLChecker extends WireData implements Module, ConfigurableModule {

    public static function getModuleInfo() {
        return array(
            'title'    => 'InputfieldURLChecker',
            'author'   => 'Roland Toth',
            'version'  => 114,
            'summary'  => 'Admin helper for adding button or hotkey to FieldtypeURL to check link.',
            'href'     => 'https://github.com/rolandtoth/InputfieldURLChecker',
            'icon'     => 'arrow-right',
            'singular' => true,
            'autoload' => true
        );
    }


    public function getModuleConfigInputfields(array $data) {

        $modules = $this->wire('modules');

        $fields = new InputfieldWrapper();


        $fieldset              = new InputfieldFieldset();
        $fieldset->label       = __('Mode options', __FILE__);
        $fieldset->description = __('Check the modes you would like to use the module.', __FILE__);

        // Mode
        $field           = $modules->get('InputfieldCheckboxes');
        $field->name     = 'mode';
        $field->label    = __('Mode', __FILE__);
        $field->required = true;
        $field->addOption('button', __('Button', 'IUC'));
        $field->addOption('ctrl-shift-click', __('Ctrl + Shift + Click', 'IUC'));
        $field->addOption('ctrl-shift-enter', __('Ctrl + Shift + Enter', 'IUC'));
        $field->value       = isset($data['mode']) ? $data['mode'] : 'button';
        $field->columnWidth = 50;
        $fieldset->add($field);

        // Mode - button
        $field        = $modules->get('InputfieldRadios');
        $field->name  = 'button_position';
        $field->label = __('Button position', __FILE__);
        $field->addOption('button-left', __('Left side of the field', 'IUC'));
        $field->addOption('button-right', __('Right side of the field', 'IUC'));
        $field->value       = isset($data['button_position']) ? $data['button_position'] : 'button-left';
        $field->required    = true;
        $field->showIf      = 'mode=button';
        $field->requiredIf  = 'mode=button';
        $field->columnWidth = 50;
        $fieldset->add($field);


        $fields->add($fieldset);


        // Target
        $fieldset        = new InputfieldFieldset();
        $fieldset->label = __('Target options', __FILE__);


        // Mode - button
        $field        = $modules->get('InputfieldRadios');
        $field->name  = 'target';
        $field->label = __('Open link in...', __FILE__);
        $field->notes = __('Iframe mode fails if the target website does not allow iframe embed.', __FILE__);
        $field->addOption('new-window', __('new window or tab (default)', 'IUC'));
        $field->addOption('iframe', __('iframe', 'IUC'));
        $field->value       = isset($data['target']) ? $data['target'] : 'new-window';
        $field->required    = true;
        $field->columnWidth = 100;
        $fieldset->add($field);


        $fields->add($fieldset);


        // Force http prefix

        $fieldset        = new InputfieldFieldset();
        $fieldset->label = __('General', __FILE__);

        $field              = $modules->get('InputfieldCheckbox');
        $field->name        = 'force_http';
        $field->label       = __('Force HTTP prefix', __FILE__);
        $field->value       = (isset($data['force_http'])) ? $data['force_http'] : 1;
        $field->checked     = ($field->value == 1) ? 'checked' : '';
        $field->columnWidth = 100;
        $fieldset->add($field);

        $fields->add($fieldset);


        // Restrict module fieldset
        $fieldset              = new InputfieldFieldset();
        $fieldset->label       = __('Restrict module', __FILE__);
        $fieldset->description = __('List of templates/fields where module should be active. Select none to enable globally.', __FILE__);


        // Enabled templates
        $field        = $modules->get('InputfieldAsmSelect');
        $field->name  = 'enabled_templates';
        $field->label = __('Enabled templates', __FILE__);
        $field->attr('data-asm-placeholder', __('Add templates...', __FILE__));
        $field->columnWidth = 50;

        foreach ($this->wire('templates') as $t) {
            $field->addOption($t->name, self::getFormattedOptionName($t));
        }

        $field->value = isset($data['enabled_templates']) ? $data['enabled_templates'] : '';
        $fieldset->add($field);


        // Enabled fields asm select

        $url_fields = $this->wire('fields')->find('type=FieldtypeURL');

        // add asm select only if there is any URL type field
        if (count($url_fields)) {

            $field              = $modules->get('InputfieldAsmSelect');
            $field->name        = 'enabled_fields';
            $field->label       = __('Enabled fields', __FILE__);
            $field->columnWidth = 50;

            foreach ($url_fields as $f) {
                $field->addOption($f->name, self::getFormattedOptionName($f));
            }

            $field->attr('data-asm-placeholder', __('Add fields...', __FILE__));

            $field->value = isset($data['enabled_fields']) ? $data['enabled_fields'] : '';

        } else {

            // add info that no URL type fields are available
            $field              = $modules->get('InputfieldMarkup');
            $field->name        = 'no_url_fields';
            $field->label       = __('Enabled fields', __FILE__);
            $field->columnWidth = 50;
            $field->markupText  = __('There are currently no fields of type URL available in the system.', __FILE__);
        }

        $fieldset->add($field);

        $fields->add($fieldset);

        return $fields;
    }


    public function ready() {

        $process = $this->wire('page')->process;

        if ($this->wire('page')->template->name != 'admin') {
            return false;
        }

        if (!in_array($process, array('ProcessPageEdit', 'ProcessProfile'))) {
            return false;
        }

        if ($process == 'ProcessPageEdit') {

            $id = $this->sanitizer->int($this->config->input->get->id);

            if (empty($id) || !is_numeric($id)) {
                return false;
            }

            $editedPage = $this->wire('pages')->get('id=' . $id);
        }

        if (($editedPage instanceof NullPage || $process == 'ProcessProfile')) {
            $this->addHookBefore('Page::render', $this, 'addAssets');
        }

        $this->addHookAfter('InputfieldURL::renderValue', $this, 'addEditLink');
        $this->addHookAfter('InputfieldURL::render', $this, 'addEditLink');

        $this->addHookBefore('ProcessPageEdit::execute', $this, 'addAssets');

        return false;
    }


    public function addEditLink(HookEvent $event) {

        $inputfield     = $event->object;
        $configData     = $this->wire('modules')->getModuleConfigData($this);
        $page           = $this->pages->get($this->input->get->id);
        $editLinkMarkup = '';

        if (!empty($configData['enabled_templates']) && !in_array($page->template->name, $configData['enabled_templates'])) {
            return false;
        }

        if (!empty($configData['enabled_fields']) && !in_array($inputfield->name, $configData['enabled_fields'])) {
            return false;
        }


        // process locked fields
        if (in_array($inputfield->collapsed, array(7, 8))) {
            $target        = isset($configData['target']) ? ' data-iuc-target="' . $configData['target'] . '"' : '';
            $event->return = '<a href="' . $event->return . '" target="_blank" class="iuc iuc-locked-link"' . $target . '>' . $event->return . '</a>';

            return false;
        }


        if (isset($configData['mode'])) {

            $mode = implode(',', $configData['mode']);

            if (array_intersect($configData['mode'], array('ctrl-shift-enter', 'ctrl-shift-click'))) {
                $event->return = str_replace('>', ' data-iuc-mode="' . $mode . '">', $event->return);
            }

            if (in_array('button', $configData['mode'])) {
                $buttonPosition = isset($configData['button_position']) ? $configData['button_position'] : '';
                $editLinkMarkup = '<a class="iuc iuc-button ' . $buttonPosition . '" target="_blank"><i class="fa fa-arrow-right"></i></a>' . PHP_EOL;
            }
        }

        if (isset($configData['target'])) {
            $event->return = str_replace('>', ' data-iuc-target="' . $configData['target'] . '">', $event->return);
        }

        if (isset($configData['force_http']) && $configData['force_http'] == 1) {
            $event->return = str_replace('>', ' data-iuc-force-http="1">', $event->return);
        }

        $event->return = $editLinkMarkup . $event->return;
    }


    public function addAssets(HookEvent $event) {

        $this->config->scripts->add($this->config->urls->siteModules . __CLASS__ . '/' . __CLASS__ . '.js?v=' . time());
        $this->config->styles->add($this->config->urls->siteModules . __CLASS__ . '/' . __CLASS__ . '.css?v=' . time());

        return false;
    }


    public function getFormattedOptionName($obj) {
        return !empty($obj->label) ? $obj->label . ' (' . $obj->name . ')' : $obj->name;
    }

}
