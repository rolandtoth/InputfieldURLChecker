<?php

/**
 * Test URL Field module for ProcessWire
 * https://goo.gl/GRM0jp
 */

/**
 * Class TestUrlField
 */
class TestUrlField extends WireData implements Module, ConfigurableModule {

    public $configData;

    public static function getModuleInfo() {
        return array(
            'title' => 'Test URL Field',
            'author' => 'Roland Toth',
            'version' => 90,
            'summary' => 'Add button to URL fields to test link validity.',
            'href' => '',
            'icon' => 'arrow-right',
            'singular' => true,
            'autoload' => true
        );
    }


    public static function getModuleConfigInputfields(array $data) {

        $modules = wire('modules');

        $fields = new InputfieldWrapper();

        $field = $modules->get("InputfieldRadios");
        $field->name = "mode";
        $field->label = __("Mode");
        $field->notes = __("Whether to use a dedicated button or a key/click combo to open URL field contents.");
        $field->addOption('button', __('Button (default)'));
        $field->addOption('ctrl-shift-click', __('Ctrl + Shift + Click'));
        $field->addOption('ctrl-shift-enter', __('Ctrl + Shift + Enter'));
        $field->value = isset($data['mode']) ? $data['mode'] : 'button';
        $field->columnWidth = 100;
        $fields->add($field);

        $field = $modules->get("InputfieldCheckbox");
        $field->name = "force_http";
        $field->label = __('Force "http://"');
        $field->notes = __('Prepend "http://" to link value (default: on).');
        $field->value = (isset($data['force_http'])) ? $data['force_http'] : 1;
        $field->checked = ($field->value == 1) ? 'checked' : '';
        $field->columnWidth = 100;
        $fields->add($field);

        $field = wire('modules')->get('InputfieldText');
        $field->name = 'enabled_fields';
        $field->label = __('Enabled fields');
        $field->attr('placeholder', 'my_field, another_field');
        $field->columnWidth = 100;
        $field->value = isset($data['enabled_fields']) ? $data['enabled_fields'] : '';
        $field->notes = __('Comma-separated list of field names where module should be enabled. Leave empty to enable all.');
        $fields->add($field);

        $field = wire('modules')->get('InputfieldText');
        $field->name = 'enabled_templates';
        $field->label = __('Enabled templates');
        $field->attr('placeholder', 'basic-page, my-page');
        $field->columnWidth = 100;
        $field->value = isset($data['enabled_templates']) ? $data['enabled_templates'] : '';
        $field->notes = __('Comma-separated list of template names where module should be enabled. Leave empty to enable all.');
        $fields->add($field);

        return $fields;
    }


    public function init() {

        $this->addHookAfter('ProcessPageEdit::execute', $this, 'addJsConfig');

        $this->config->scripts->add($this->config->urls->siteModules . $this->className . '/' . $this->className . '.js?v=' . time());
        $this->config->styles->add($this->config->urls->siteModules . $this->className . '/' . $this->className . '.css?v=' . time());
    }


    public function addJsConfig(HookEvent $event) {
        $this->config->js("TUF", array(
                'mode' => isset($this->configData['mode']) ? $this->configData['mode'] : 'button',
                'forceHttp' => (bool)(isset($this->configData['force_http']) ? $this->configData['force_http'] : 1),
                'enabled_fields' => isset($this->configData['enabled_fields']) ? $this->configData['enabled_fields'] : '',
                'enabled_templates' => isset($this->configData['enabled_templates']) ? $this->configData['enabled_templates'] : '',
                'template' => $event->object->getPage()->template->name
            )
        );
    }


    public function __construct() {
        $this->configData = wire('modules')->getModuleConfigData($this);
    }

}
